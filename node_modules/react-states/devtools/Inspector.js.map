{"version":3,"file":"Inspector.js","sourceRoot":"","sources":["../src/devtools/Inspector.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport * as styles from './styles';\nimport { isArray, isObject } from './utils';\n\nfunction renderValue({\n  path,\n  value,\n  delimiter,\n  renderPaths,\n  expandedPaths,\n  onClickPath,\n  onToggleExpand,\n  selectedStatePath,\n  onSubmitState,\n}: {\n  onSubmitState?: (newState: string) => void;\n  selectedStatePath?: string;\n  onToggleExpand: (path: string[]) => void;\n  path: string;\n  delimiter: string;\n  value: any;\n  renderPaths?: RenderPaths;\n  expandedPaths: string[];\n  onClickPath?: (path: string[]) => void;\n}) {\n  const wrapper = renderPaths && renderPaths[path];\n  let node;\n\n  if (isObject(value)) {\n    node = (\n      <Nested\n        key={path}\n        startBracket=\"{\"\n        endBracket=\"}\"\n        path={path}\n        delimiter={delimiter}\n        expandedPaths={expandedPaths}\n        hasWrapper={Boolean(wrapper)}\n        onClickPath={onClickPath}\n        renderPaths={renderPaths}\n        onToggleExpand={onToggleExpand}\n        isArray={false}\n        value={value}\n        selectedStatePath={selectedStatePath}\n        onSubmitState={onSubmitState}\n      />\n    );\n  } else if (isArray(value)) {\n    node = (\n      <Nested\n        key={path}\n        startBracket=\"[\"\n        endBracket=\"]\"\n        delimiter={delimiter}\n        renderPaths={renderPaths}\n        path={path}\n        expandedPaths={expandedPaths}\n        hasWrapper={Boolean(wrapper)}\n        onClickPath={onClickPath}\n        onToggleExpand={onToggleExpand}\n        isArray\n        value={value}\n        selectedStatePath={selectedStatePath}\n        onSubmitState={onSubmitState}\n      />\n    );\n  } else {\n    node = (\n      <ValueComponent\n        key={path}\n        path={path}\n        delimiter={delimiter}\n        value={value}\n        onClickPath={onClickPath}\n        selectedStatePath={selectedStatePath}\n        hasWrapper={Boolean(wrapper)}\n        onSubmitState={onSubmitState}\n      />\n    );\n  }\n\n  return wrapper ? wrapper(node) : node;\n}\n\ntype PathKeyProps = {\n  path: string;\n  onClickPath?: (path: string[]) => void;\n  onToggleExpand?: (path: string[]) => void;\n  disabled: boolean;\n  delimiter: string;\n};\n\nconst PathKey = ({ path, onClickPath, onToggleExpand, disabled, delimiter }: PathKeyProps) => {\n  return path.length ? (\n    <span\n      style={styles.key}\n      onClick={\n        disabled\n          ? undefined\n          : (event) => {\n              event.stopPropagation();\n              if (onClickPath && (event.metaKey || event.ctrlKey)) {\n                onClickPath(path.split(delimiter));\n              } else if (onToggleExpand) {\n                onToggleExpand(path.split(delimiter));\n              }\n            }\n      }\n    >\n      {path.split(delimiter).pop()}:\n    </span>\n  ) : null;\n};\n\ntype NestedProps = {\n  startBracket: string;\n  endBracket: string;\n  expandedPaths: string[];\n  renderPaths?: RenderPaths;\n  delimiter: string;\n  path: string;\n  hasWrapper: boolean;\n  isArray: boolean;\n  value: any;\n  onToggleExpand: (path: string[]) => void;\n  onClickPath?: (path: string[]) => void;\n  selectedStatePath?: string;\n  onSubmitState?: (newState: string) => void;\n};\n\nconst Nested = React.memo(\n  ({\n    expandedPaths,\n    path,\n    onToggleExpand,\n    onClickPath,\n    startBracket,\n    renderPaths,\n    hasWrapper,\n    endBracket,\n    isArray,\n    selectedStatePath,\n    value,\n    delimiter,\n    onSubmitState,\n  }: NestedProps) => {\n    const shouldCollapse = !expandedPaths.includes(path);\n\n    if (selectedStatePath && path === selectedStatePath) {\n      return (\n        <div\n          style={styles.inlineNested}\n          onClick={(event) => {\n            event.stopPropagation();\n            onToggleExpand(path.split(delimiter));\n          }}\n        >\n          {path.length ? <span style={styles.key}>{path.split(delimiter).pop()}:</span> : null}\n        </div>\n      );\n    }\n\n    if (shouldCollapse) {\n      const keys = Object.keys(value);\n\n      return (\n        <div\n          style={styles.inlineNested}\n          onClick={(event) => {\n            event.stopPropagation();\n            onToggleExpand(path.split(delimiter));\n          }}\n        >\n          <PathKey\n            path={path}\n            delimiter={delimiter}\n            onClickPath={onClickPath}\n            onToggleExpand={onToggleExpand}\n            disabled={!onSubmitState || hasWrapper}\n          />\n          {startBracket}\n          <span style={styles.keyCount}>\n            {isArray ? (\n              keys.length + ' items'\n            ) : (\n              <span style={styles.inlineNested}>{keys.sort().slice(0, 3).join(', ') + '...'}</span>\n            )}\n          </span>\n          {endBracket}\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        <div\n          style={styles.bracket(true)}\n          onClick={(event) => {\n            event.stopPropagation();\n            onToggleExpand(path.split(delimiter));\n          }}\n        >\n          <PathKey\n            path={path}\n            delimiter={delimiter}\n            onClickPath={onClickPath}\n            onToggleExpand={onToggleExpand}\n            disabled={!onSubmitState || hasWrapper}\n          />\n          {startBracket}\n        </div>\n        <div style={styles.nestedChildren}>\n          {Array.isArray(value)\n            ? value.map((_, index) =>\n                renderValue({\n                  path: path.concat((path ? delimiter : '') + String(index)),\n                  delimiter,\n                  value: value[index],\n                  renderPaths,\n                  expandedPaths,\n                  onClickPath,\n                  onSubmitState,\n                  onToggleExpand,\n                  selectedStatePath,\n                }),\n              )\n            : Object.keys(value)\n                .sort()\n                .map((key) => {\n                  return renderValue({\n                    path: path.concat((path ? delimiter : '') + key),\n                    value: value[key],\n                    delimiter,\n                    renderPaths,\n                    expandedPaths,\n                    onClickPath,\n                    onSubmitState,\n                    onToggleExpand,\n                    selectedStatePath,\n                  });\n                })}\n        </div>\n        <div style={styles.bracket(false)}>{endBracket}</div>\n      </div>\n    );\n  },\n);\n\ntype ValueComponentProps = {\n  value: string | number | boolean;\n  path: string;\n  hasWrapper: boolean;\n  onClickPath?: (path: string[]) => void;\n  delimiter: string;\n  selectedStatePath?: string;\n  onSubmitState?: (newState: string) => void;\n};\n\nconst ValueComponent = React.memo(\n  ({ value, path, onClickPath, selectedStatePath, onSubmitState, hasWrapper, delimiter }: ValueComponentProps) => {\n    const [isHoveringString, setHoveringString] = React.useState(false);\n\n    if (selectedStatePath && path === selectedStatePath) {\n      return (\n        <div style={styles.genericValue}>\n          {path.length ? <span style={styles.key}>{path.split(delimiter).pop()}:</span> : null}\n        </div>\n      );\n    }\n\n    if (typeof value === 'string' && value[0] === '[' && value[value.length - 1] === ']') {\n      return (\n        <div style={styles.otherValue}>\n          <PathKey\n            path={path}\n            delimiter={delimiter}\n            onClickPath={onClickPath}\n            disabled={!onSubmitState || hasWrapper}\n          />\n          {value.substr(1, value.length - 2)}\n        </div>\n      );\n    }\n\n    if (typeof value === 'string') {\n      return (\n        <div style={styles.stringValue}>\n          <PathKey\n            path={path}\n            delimiter={delimiter}\n            onClickPath={onClickPath}\n            disabled={!onSubmitState || hasWrapper}\n          />\n          <div onMouseOver={() => setHoveringString(true)} onMouseOut={() => setHoveringString(false)}>\n            \"{value.length > 50 && !isHoveringString ? value.substr(0, 50) + '...' : value}\"\n          </div>\n        </div>\n      );\n    }\n\n    if (typeof value === 'function') {\n      return (\n        <div style={styles.otherValue}>\n          <PathKey\n            path={path}\n            delimiter={delimiter}\n            onClickPath={onClickPath}\n            disabled={!onSubmitState || hasWrapper}\n          />\n          <div>action</div>\n        </div>\n      );\n    }\n\n    return (\n      <div style={styles.genericValue}>\n        <PathKey path={path} delimiter={delimiter} onClickPath={onClickPath} disabled={!onSubmitState || hasWrapper} />\n        {String(value)}\n      </div>\n    );\n  },\n);\n\nexport type RenderPaths = {\n  [path: string]: (children: React.ReactNode) => React.ReactNode;\n};\n\ntype InspectorProps = {\n  value: object;\n  expandedPaths: string[];\n  delimiter: string;\n  small?: boolean;\n  onToggleExpand: (path: string[]) => void;\n  onClickPath?: (path: string[]) => void;\n  renderPaths?: RenderPaths;\n  selectedStatePath?: string;\n  onSubmitState?: (newState: string) => void;\n};\n\nconst Inspector = ({\n  value,\n  expandedPaths,\n  small,\n  onToggleExpand,\n  delimiter,\n  onClickPath = () => {},\n  renderPaths,\n  selectedStatePath = '',\n  onSubmitState,\n}: InspectorProps) => {\n  return (\n    <div style={small ? styles.smallWrapper : styles.wrapper}>\n      {renderValue({\n        path: '',\n        delimiter,\n        value,\n        renderPaths,\n        expandedPaths,\n        onClickPath,\n        onToggleExpand,\n        selectedStatePath,\n        onSubmitState,\n      })}\n    </div>\n  );\n};\n\nexport default Inspector;\n"]}