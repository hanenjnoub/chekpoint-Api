import * as React from 'react';
import * as styles from './styles';
import { isArray, isObject } from './utils';
function renderValue({ path, value, delimiter, renderPaths, expandedPaths, onClickPath, onToggleExpand, selectedStatePath, onSubmitState, }) {
    const wrapper = renderPaths && renderPaths[path];
    let node;
    if (isObject(value)) {
        node = (React.createElement(Nested, { key: path, startBracket: "{", endBracket: "}", path: path, delimiter: delimiter, expandedPaths: expandedPaths, hasWrapper: Boolean(wrapper), onClickPath: onClickPath, renderPaths: renderPaths, onToggleExpand: onToggleExpand, isArray: false, value: value, selectedStatePath: selectedStatePath, onSubmitState: onSubmitState }));
    }
    else if (isArray(value)) {
        node = (React.createElement(Nested, { key: path, startBracket: "[", endBracket: "]", delimiter: delimiter, renderPaths: renderPaths, path: path, expandedPaths: expandedPaths, hasWrapper: Boolean(wrapper), onClickPath: onClickPath, onToggleExpand: onToggleExpand, isArray: true, value: value, selectedStatePath: selectedStatePath, onSubmitState: onSubmitState }));
    }
    else {
        node = (React.createElement(ValueComponent, { key: path, path: path, delimiter: delimiter, value: value, onClickPath: onClickPath, selectedStatePath: selectedStatePath, hasWrapper: Boolean(wrapper), onSubmitState: onSubmitState }));
    }
    return wrapper ? wrapper(node) : node;
}
const PathKey = ({ path, onClickPath, onToggleExpand, disabled, delimiter }) => {
    return path.length ? (React.createElement("span", { style: styles.key, onClick: disabled
            ? undefined
            : (event) => {
                event.stopPropagation();
                if (onClickPath && (event.metaKey || event.ctrlKey)) {
                    onClickPath(path.split(delimiter));
                }
                else if (onToggleExpand) {
                    onToggleExpand(path.split(delimiter));
                }
            } },
        path.split(delimiter).pop(),
        ":")) : null;
};
const Nested = React.memo(({ expandedPaths, path, onToggleExpand, onClickPath, startBracket, renderPaths, hasWrapper, endBracket, isArray, selectedStatePath, value, delimiter, onSubmitState, }) => {
    const shouldCollapse = !expandedPaths.includes(path);
    if (selectedStatePath && path === selectedStatePath) {
        return (React.createElement("div", { style: styles.inlineNested, onClick: (event) => {
                event.stopPropagation();
                onToggleExpand(path.split(delimiter));
            } }, path.length ? React.createElement("span", { style: styles.key },
            path.split(delimiter).pop(),
            ":") : null));
    }
    if (shouldCollapse) {
        const keys = Object.keys(value);
        return (React.createElement("div", { style: styles.inlineNested, onClick: (event) => {
                event.stopPropagation();
                onToggleExpand(path.split(delimiter));
            } },
            React.createElement(PathKey, { path: path, delimiter: delimiter, onClickPath: onClickPath, onToggleExpand: onToggleExpand, disabled: !onSubmitState || hasWrapper }),
            startBracket,
            React.createElement("span", { style: styles.keyCount }, isArray ? (keys.length + ' items') : (React.createElement("span", { style: styles.inlineNested }, keys.sort().slice(0, 3).join(', ') + '...'))),
            endBracket));
    }
    return (React.createElement("div", null,
        React.createElement("div", { style: styles.bracket(true), onClick: (event) => {
                event.stopPropagation();
                onToggleExpand(path.split(delimiter));
            } },
            React.createElement(PathKey, { path: path, delimiter: delimiter, onClickPath: onClickPath, onToggleExpand: onToggleExpand, disabled: !onSubmitState || hasWrapper }),
            startBracket),
        React.createElement("div", { style: styles.nestedChildren }, Array.isArray(value)
            ? value.map((_, index) => renderValue({
                path: path.concat((path ? delimiter : '') + String(index)),
                delimiter,
                value: value[index],
                renderPaths,
                expandedPaths,
                onClickPath,
                onSubmitState,
                onToggleExpand,
                selectedStatePath,
            }))
            : Object.keys(value)
                .sort()
                .map((key) => {
                return renderValue({
                    path: path.concat((path ? delimiter : '') + key),
                    value: value[key],
                    delimiter,
                    renderPaths,
                    expandedPaths,
                    onClickPath,
                    onSubmitState,
                    onToggleExpand,
                    selectedStatePath,
                });
            })),
        React.createElement("div", { style: styles.bracket(false) }, endBracket)));
});
const ValueComponent = React.memo(({ value, path, onClickPath, selectedStatePath, onSubmitState, hasWrapper, delimiter }) => {
    const [isHoveringString, setHoveringString] = React.useState(false);
    if (selectedStatePath && path === selectedStatePath) {
        return (React.createElement("div", { style: styles.genericValue }, path.length ? React.createElement("span", { style: styles.key },
            path.split(delimiter).pop(),
            ":") : null));
    }
    if (typeof value === 'string' && value[0] === '[' && value[value.length - 1] === ']') {
        return (React.createElement("div", { style: styles.otherValue },
            React.createElement(PathKey, { path: path, delimiter: delimiter, onClickPath: onClickPath, disabled: !onSubmitState || hasWrapper }),
            value.substr(1, value.length - 2)));
    }
    if (typeof value === 'string') {
        return (React.createElement("div", { style: styles.stringValue },
            React.createElement(PathKey, { path: path, delimiter: delimiter, onClickPath: onClickPath, disabled: !onSubmitState || hasWrapper }),
            React.createElement("div", { onMouseOver: () => setHoveringString(true), onMouseOut: () => setHoveringString(false) },
                "\"",
                value.length > 50 && !isHoveringString ? value.substr(0, 50) + '...' : value,
                "\"")));
    }
    if (typeof value === 'function') {
        return (React.createElement("div", { style: styles.otherValue },
            React.createElement(PathKey, { path: path, delimiter: delimiter, onClickPath: onClickPath, disabled: !onSubmitState || hasWrapper }),
            React.createElement("div", null, "action")));
    }
    return (React.createElement("div", { style: styles.genericValue },
        React.createElement(PathKey, { path: path, delimiter: delimiter, onClickPath: onClickPath, disabled: !onSubmitState || hasWrapper }),
        String(value)));
});
const Inspector = ({ value, expandedPaths, small, onToggleExpand, delimiter, onClickPath = () => { }, renderPaths, selectedStatePath = '', onSubmitState, }) => {
    return (React.createElement("div", { style: small ? styles.smallWrapper : styles.wrapper }, renderValue({
        path: '',
        delimiter,
        value,
        renderPaths,
        expandedPaths,
        onClickPath,
        onToggleExpand,
        selectedStatePath,
        onSubmitState,
    })));
};
export default Inspector;
//# sourceMappingURL=Inspector.js.map