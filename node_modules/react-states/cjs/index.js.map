{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { Dispatch, useMemo } from 'react';\nimport type { Manager } from './devtools/Manager';\n\nexport const $ACTION = Symbol('ACTION');\nexport const $PREV_STATE = Symbol('PREV_STATE');\nexport const $TRANSITIONS = Symbol('TRANSITIONS');\nexport const DEBUG_TRANSITIONS = Symbol('DEBUG_TRANSITIONS');\nexport const DEBUG_COMMAND = Symbol('DEBUG_COMMAND');\nexport const DEBUG_ID = Symbol('DEBUG_ID');\n\nconst DEBUG_TRIGGER_TRANSITIONS = Symbol('DEBUG_TRIGGER_TRANSITIONS');\n\nexport interface IState {\n  state: string;\n  [$ACTION]?: IAction;\n  [$TRANSITIONS]?: TReadableTransition<any>;\n}\n\nexport const createStates = <T extends Record<string, (...params: any[]) => Record<string, unknown>>>(\n  states: T,\n): {\n  [U in keyof T]: (...params: Parameters<T[U]>) => ReturnType<T[U]> & { state: U };\n} => {\n  const statesWithState = {} as any;\n\n  for (let state in states) {\n    // @ts-ignore\n    statesWithState[state] = (...params: any[]) => ({ ...states[state](...params), state });\n  }\n\n  return statesWithState;\n};\n\nexport const createActions = <T extends Record<string, (...params: any[]) => Record<string, unknown>>>(\n  actions: T,\n): ((\n  dispatch: Dispatch<\n    {\n      [U in keyof T]: ReturnType<T[U]> & { type: U };\n    }[keyof T]\n  >,\n) => {\n  [U in keyof T]: (...params: Parameters<T[U]>) => void;\n}) => {\n  return (dispatch) =>\n    useMemo(() => {\n      const actionsWithType = {} as any;\n\n      for (let type in actions) {\n        // @ts-ignore\n        actionsWithType[type] = (...params: unknown[]) => dispatch({ ...actions[type](...params), type });\n      }\n\n      return actionsWithType;\n    }, [dispatch]);\n};\n\nexport type StatesUnion<T extends Record<string, (...params: any[]) => any>> = ReturnType<T[keyof T]>;\n\nexport type ActionsUnion<T extends (dispatch: Dispatch<any>) => any> = Parameters<T>[0] extends Dispatch<infer A>\n  ? A\n  : never;\n\nexport interface IAction {\n  type: string;\n}\n\ntype TMatch<S extends IState, R = any> = {\n  [SS in S['state']]: (state: S & { state: SS }) => R;\n};\n\ntype TPartialMatch<S extends IState, R = any> = {\n  [SS in S['state']]?: (state: S & { state: SS }) => R;\n};\n\nexport type PickState<S extends IState, T extends S['state'] = never> = [T] extends [never]\n  ? S\n  : S extends { state: T }\n  ? S\n  : never;\n\nexport type PickAction<A extends IAction, T extends A['type']> = A extends { type: T } ? A : never;\n\nexport type TTransition<S extends IState, A extends IAction, SS extends S['state'] = S['state']> = {\n  [AA in A['type']]?: (state: S & { state: SS }, action: A extends { type: AA } ? A : never) => S;\n};\n\nexport type TTransitions<S extends IState, A extends IAction> = {\n  [SS in S['state']]: TTransition<S, A, SS>;\n};\n\ntype TReadableTransition<T extends TTransitions<any, any>> = {\n  [S in keyof T]: {\n    [A in keyof T[S]]: S extends string\n      ? A extends string\n        ? T[S][A] extends (...args: any[]) => IState\n          ? // @ts-ignore\n            `${S} => ${A} => ${ReturnType<T[S][A]>['state']}`\n          : never\n        : never\n      : never;\n  }[keyof T[S]];\n}[keyof T];\n\nexport function transition<S extends IState, A extends IAction, T extends TTransitions<S, A>>(\n  state: S,\n  action: A,\n  transitions: T,\n): S & { [$ACTION]?: A; [$PREV_STATE]?: S; [$TRANSITIONS]?: TReadableTransition<T> } {\n  let newState = state;\n\n  // @ts-ignore\n  const debugId = state[DEBUG_ID];\n\n  // @ts-ignore\n  if (transitions[state.state] && transitions[state.state][action.type]) {\n    // @ts-ignore\n    newState = transitions[state.state][action.type](state, action);\n    // @ts-ignore\n    newState[$ACTION] = action;\n    // @ts-ignore\n    action[$ACTION] && newState !== state && action[$ACTION](debugId, false);\n    // @ts-ignore\n    newState[$PREV_STATE] = state;\n    // @ts-ignore\n    delete state[$PREV_STATE];\n    // @ts-ignore\n    delete state[$ACTION];\n  } else {\n    // @ts-ignore\n    action[$ACTION] && action[$ACTION](debugId, true);\n  }\n\n  if (debugId) {\n    // @ts-ignore\n    newState[DEBUG_ID] = debugId;\n\n    // @ts-ignore\n    newState[DEBUG_TRANSITIONS] = transitions;\n  }\n\n  return newState as any;\n}\n\nexport function useEnter<S extends IState, SS extends S['state'] | S['state'][]>(\n  state: S,\n  states: SS,\n  effect: (\n    current: SS extends string[] ? S & { state: SS[number] } : SS extends string ? S & { state: SS } : never,\n  ) => void | (() => void),\n  deps: unknown[] = [],\n) {\n  // @ts-ignore\n  const statesList: string[] = Array.isArray(states) ? states : [states];\n  const currentState = state;\n  const isMatch = statesList.includes(state.state);\n\n  // @ts-ignore\n  return React.useEffect(() => isMatch && effect(currentState), deps.concat(isMatch));\n}\n\nexport function useTransition<S extends IState, T extends S[typeof $TRANSITIONS] | S[typeof $TRANSITIONS][]>(\n  state: S,\n  transition: T,\n  effect: T extends `${infer SP} => ${infer A} => ${infer SC}` | `${infer SP} => ${infer A} => ${infer SC}`[]\n    ? (\n        current: S & { state: SC },\n        action: Exclude<S[typeof $ACTION], undefined> & { type: A },\n        prev: S & { state: SP },\n      ) => void | (() => void)\n    : never,\n\n  deps?: unknown[],\n): void;\nexport function useTransition<S extends IState>(\n  state: S,\n  effect: (\n    current: S,\n    action: Exclude<S[typeof $ACTION], undefined> | undefined,\n    prev: S | undefined,\n  ) => void | (() => void),\n  deps?: unknown[],\n): void;\nexport function useTransition() {\n  const state = arguments[0];\n  const transitions = arguments[1];\n  const cb = arguments[2] || arguments[1];\n  const deps = Array.isArray(arguments[arguments.length - 1]) ? arguments[arguments.length - 1] : [];\n\n  if (typeof transitions === 'function') {\n    return React.useEffect(() => cb(state, state[$ACTION], state[$PREV_STATE]), deps.concat(state));\n  }\n\n  return React.useEffect(() => {\n    const transitionsList: string[] = Array.isArray(transitions) ? transitions : [transitions];\n    const currentState = state;\n    const prevState = state[$PREV_STATE];\n    const action = state[$ACTION];\n    const transition = `${prevState?.state} => ${action?.type} => ${currentState.state}`;\n\n    if (transitionsList.includes(transition)) {\n      return cb(currentState, action, prevState);\n    }\n  }, deps.concat(state));\n}\n\nexport function match<S extends IState, T extends TMatch<S>>(\n  state: S,\n  matches: T,\n): {\n  [K in keyof T]: T[K] extends (...args: any[]) => infer R ? R : never;\n}[keyof T];\nexport function match<S extends IState, T extends TPartialMatch<S>, U>(\n  state: S,\n  matches: T,\n  _: (state: S & { state: Exclude<S['state'], keyof T> }) => U,\n):\n  | {\n      [K in keyof T]: T[K] extends (...args: any[]) => infer R ? R : never;\n    }[keyof T]\n  | U;\nexport function match() {\n  const state = arguments[0];\n  const matches = arguments[1];\n  const _ = arguments[2];\n\n  if (_) {\n    return (matches[state.state] || _)(state);\n  }\n\n  return matches[state.state](state);\n}\n\nexport function matchProp<\n  S extends IState,\n  P extends {\n    [K in keyof S]: keyof (S & { state: K });\n  }[keyof S]\n>(state: S, prop: P): S extends Record<P, unknown> ? S : undefined;\nexport function matchProp() {\n  const state = arguments[0];\n  const prop = arguments[1];\n  // @ts-ignore\n  return prop in state ? state : undefined;\n}\n\nexport const managerContext = React.createContext((null as unknown) as Manager);\n\n// We have to type as any as States<any, any> throws error not matching\n// the explicit context\nexport const useDevtools = (id: string, reducer: [any, any]) => {\n  const manager = React.useContext(managerContext);\n\n  // We allow using the hook without having the wrapping devtool\n  if (!manager) {\n    return reducer;\n  }\n\n  const [state, dispatch] = reducer;\n\n  React.useEffect(() => () => manager.dispose(id), [id, manager]);\n\n  // @ts-ignore\n  reducer[0][DEBUG_ID] = id;\n  // @ts-ignore\n  reducer[0][DEBUG_COMMAND] = (command: { cmd: string }) => {\n    manager.onMessage(id, {\n      type: 'command',\n      command,\n    });\n  };\n\n  reducer[1] = (action: any) => {\n    action[$ACTION] = (id: string, isIgnored: boolean) => {\n      manager.onMessage(id, {\n        type: 'dispatch',\n        action,\n        ignored: isIgnored,\n      });\n    };\n\n    dispatch(action);\n\n    if (action.type === DEBUG_TRIGGER_TRANSITIONS) {\n      manager.onMessage(id, {\n        type: 'transitions',\n        // @ts-ignore\n        transitions: state[DEBUG_TRANSITIONS],\n      });\n      return;\n    }\n  };\n\n  React.useEffect(() => {\n    manager.onMessage(id, {\n      type: 'state',\n      state,\n      // @ts-ignore\n      transitions: state[DEBUG_TRANSITIONS],\n      triggerTransitions: () => {\n        // We dispatch to ensure the transition is run\n        reducer[1]({\n          type: DEBUG_TRIGGER_TRANSITIONS,\n        });\n      },\n    });\n  }, [id, manager, state]);\n\n  return reducer;\n};\n"]}