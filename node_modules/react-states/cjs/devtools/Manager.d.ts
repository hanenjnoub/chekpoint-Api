import { IAction, IState } from '../';
export declare type DevtoolMessage = {
    type: 'dispatch';
    action: IAction;
    ignored: boolean;
} | {
    type: 'state';
    state: {
        state: string;
    };
    triggerTransitions: () => void;
} | {
    type: 'transitions';
    transitions: {
        [key: string]: {
            [key: string]: Function;
        };
    };
} | {
    type: 'command';
    command: {
        cmd: string;
    };
};
export declare type HistoryItem = {
    type: 'state';
    state: IState;
} | {
    type: 'action';
    action: IAction;
    ignored: boolean;
};
export declare type StatesData = {
    [id: string]: {
        isMounted: boolean;
        history: HistoryItem[];
        transitions: {
            [key: string]: {
                [key: string]: Function;
            };
        };
        triggerTransitions: () => void;
    };
};
export declare type Subscription = (statesData: StatesData) => () => void;
export declare class Manager {
    private subscriptions;
    states: StatesData;
    private notify;
    private ensureStates;
    onMessage(id: string, message: DevtoolMessage): void;
    dispose(id: string): void;
    subscribe(cb: Function): () => void;
}
