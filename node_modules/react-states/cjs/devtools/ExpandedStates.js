"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExpandedStates = void 0;
const tslib_1 = require("tslib");
const React = tslib_1.__importStar(require("react"));
const Transitions_1 = require("./Transitions");
const History_1 = require("./History");
const styles_1 = require("./styles");
exports.ExpandedStates = React.memo(({ transitions, currentState, history, triggerTransitions, }) => {
    const [currentTab, setCurrentTab] = React.useState('history');
    const [filterIgnored, setFilterIgnored] = React.useState(true);
    return (React.createElement("div", null,
        React.createElement("div", { style: { display: 'flex', marginBottom: '0.5rem' } },
            React.createElement("button", { style: {
                    backgroundColor: 'transparent',
                    border: 0,
                    padding: 0,
                    fontFamily: 'inherit',
                    color: currentTab === 'history' ? styles_1.colors.blue : styles_1.colors.text,
                    outline: 'none',
                    cursor: 'pointer',
                    fontSize: '14px',
                    marginRight: '0.5rem',
                }, onClick: (event) => {
                    event.stopPropagation();
                    setCurrentTab('history');
                } }, "history"),
            React.createElement("button", { style: {
                    backgroundColor: 'transparent',
                    border: 0,
                    padding: 0,
                    color: currentTab === 'transitions' ? styles_1.colors.blue : styles_1.colors.text,
                    outline: 'none',
                    cursor: 'pointer',
                    fontSize: '14px',
                    marginRight: '0.5rem',
                }, onClick: (event) => {
                    event.stopPropagation();
                    triggerTransitions();
                    setCurrentTab('transitions');
                } }, "transitions"),
            React.createElement("div", { style: {
                    display: 'flex',
                    alignItems: 'center',
                    marginLeft: 'auto',
                    fontFamily: 'inherit',
                    fontSize: '12px',
                    color: styles_1.colors.text,
                    cursor: 'pointer',
                }, onClick: (event) => {
                    event.stopPropagation();
                    setFilterIgnored(!filterIgnored);
                } },
                "Filter ignored",
                React.createElement("input", { type: "checkbox", checked: filterIgnored, readOnly: true, style: {
                        backgroundColor: 'transparent',
                        border: 0,
                        padding: 0,
                        outline: 'none',
                        cursor: 'pointer',
                        fontSize: '14px',
                    } }))),
        currentTab === 'transitions' ? React.createElement(Transitions_1.Transitions, { transitions: transitions, currentState: currentState }) : null,
        currentTab === 'history' ? React.createElement(History_1.History, { history: history, filterIgnored: filterIgnored }) : null));
});
//# sourceMappingURL=ExpandedStates.js.map