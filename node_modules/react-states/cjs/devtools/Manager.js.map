{"version":3,"file":"Manager.js","sourceRoot":"","sources":["../../src/devtools/Manager.tsx"],"names":[],"mappings":"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","sourcesContent":["import { IAction, IState } from '../';\n\nexport type DevtoolMessage =\n  | {\n      type: 'dispatch';\n      action: IAction;\n      ignored: boolean;\n    }\n  | {\n      type: 'state';\n      state: {\n        state: string;\n      };\n      triggerTransitions: () => void;\n    }\n  | {\n      type: 'transitions';\n      transitions: {\n        [key: string]: {\n          [key: string]: Function;\n        };\n      };\n    }\n  | {\n      type: 'command';\n      command: {\n        cmd: string;\n      };\n    };\n\nexport type HistoryItem =\n  | {\n      type: 'state';\n      state: IState;\n    }\n  | {\n      type: 'action';\n      action: IAction;\n      ignored: boolean;\n    };\n\nexport type StatesData = {\n  [id: string]: {\n    isMounted: boolean;\n    history: HistoryItem[];\n    transitions: {\n      [key: string]: {\n        [key: string]: Function;\n      };\n    };\n    triggerTransitions: () => void;\n  };\n};\n\nexport type Subscription = (statesData: StatesData) => () => void;\n\nfunction debounce(func: (...args: any[]) => void, timeout: number) {\n  let timer: NodeJS.Timer;\n  return (...args: any[]) => {\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      func(...args);\n    }, timeout);\n  };\n}\n\nexport class Manager {\n  private subscriptions: Function[] = [];\n  states: StatesData = {};\n  private notify = debounce(() => {\n    this.subscriptions.forEach((cb) => cb(this.states));\n  }, 100);\n  private ensureStates(id: string) {\n    if (!this.states[id]) {\n      this.states[id] = {\n        isMounted: true,\n        history: [],\n        // @ts-ignore\n        transitions: {},\n        triggerTransitions: () => {},\n      };\n    }\n  }\n  onMessage(id: string, message: DevtoolMessage) {\n    this.ensureStates(id);\n\n    switch (message.type) {\n      case 'state': {\n        // You might trigger dispatches before the devtools has sent its initial state\n        const isFirstState = this.states[id].history.filter((item) => item.type === 'state').length === 0;\n\n        this.states = {\n          ...this.states,\n          [id]: {\n            ...this.states[id],\n            isMounted: true,\n            history: isFirstState\n              ? [\n                  ...this.states[id].history,\n                  {\n                    type: 'state',\n                    state: message.state,\n                  },\n                ]\n              : [\n                  {\n                    type: 'state',\n                    state: message.state,\n                  },\n                  ...this.states[id].history,\n                ],\n            triggerTransitions: message.triggerTransitions,\n          },\n        };\n        break;\n      }\n\n      case 'transitions': {\n        this.states = {\n          ...this.states,\n          [id]: {\n            ...this.states[id],\n            transitions: message.transitions,\n          },\n        };\n        break;\n      }\n      case 'dispatch': {\n        this.states = {\n          ...this.states,\n          [id]: {\n            ...this.states[id],\n            history: [\n              {\n                type: 'action',\n                action: message.action,\n                ignored: message.ignored,\n              },\n              ...this.states[id].history,\n            ],\n          },\n        };\n        break;\n      }\n    }\n    this.notify();\n  }\n\n  dispose(id: string) {\n    this.states = {\n      ...this.states,\n      [id]: {\n        ...this.states[id],\n        isMounted: false,\n      },\n    };\n    this.notify();\n  }\n  subscribe(cb: Function) {\n    this.subscriptions.push(cb);\n    return () => {\n      this.subscriptions.splice(this.subscriptions.indexOf(cb), 1);\n    };\n  }\n}\n"]}