"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DevtoolsManager = exports.DevtoolsProvider = exports.useDevtoolsManager = void 0;
const tslib_1 = require("tslib");
const React = tslib_1.__importStar(require("react"));
const Resizer_1 = require("./Resizer");
const __1 = require("../");
const Manager_1 = require("./Manager");
const StatesItem_1 = require("./StatesItem");
const styles_1 = require("./styles");
const useDevtoolsManager = () => React.useContext(__1.managerContext);
exports.useDevtoolsManager = useDevtoolsManager;
const DevtoolsProvider = ({ children, show = true }) => {
    return (React.createElement(__1.managerContext.Provider, { value: new Manager_1.Manager() },
        React.createElement("div", { suppressHydrationWarning: true }, typeof document === 'undefined' || !show ? null : React.createElement(exports.DevtoolsManager, null)),
        children));
};
exports.DevtoolsProvider = DevtoolsProvider;
const IS_OPEN_STORAGE_KEY = 'react_states_isOpen';
const WIDTH_STORAGE_KEY = 'react_states_width';
const DevtoolsManager = () => {
    const manager = React.useContext(__1.managerContext);
    const [statesData, setStatesData] = React.useState(manager.states);
    const [expandedStates, setExpandedStates] = React.useState([]);
    const [isOpen, toggleOpen] = React.useState(JSON.parse(localStorage.getItem(IS_OPEN_STORAGE_KEY) || 'false'));
    const [width, setWidth] = React.useState(() => JSON.parse(localStorage.getItem(WIDTH_STORAGE_KEY) || '"400px"'));
    React.useEffect(() => manager.subscribe(setStatesData), [manager]);
    const toggleExpanded = React.useCallback((id) => {
        setExpandedStates((current) => current.includes(id) ? current.filter((existingId) => existingId !== id) : current.concat(id));
    }, [setExpandedStates]);
    React.useEffect(() => {
        localStorage.setItem(IS_OPEN_STORAGE_KEY, JSON.stringify(isOpen));
    }, [isOpen]);
    return (React.createElement("div", { suppressHydrationWarning: true, style: {
            position: 'fixed',
            right: 0,
            fontFamily: 'monospace',
            top: 0,
            height: '100vh',
            width: isOpen ? width : '10px',
            backgroundColor: styles_1.colors.background,
            zIndex: 9999999999999,
        } },
        React.createElement(Resizer_1.Resizer, { onResize: (width) => {
                setWidth(width);
                localStorage.setItem(WIDTH_STORAGE_KEY, JSON.stringify(`${width}px`));
            }, onClick: () => toggleOpen((current) => !current), isOpen: isOpen }),
        isOpen ? (React.createElement("ul", { style: {
                listStyleType: 'none',
                padding: 0,
                overflowY: 'scroll',
                height: '100%',
                boxSizing: 'border-box',
            } }, Object.keys(statesData).map((id) => {
            const data = statesData[id];
            return (React.createElement(StatesItem_1.StatesItem, { key: id, id: id, transitions: data.transitions, history: data.history, isMounted: data.isMounted, isExpanded: expandedStates.includes(id), toggleExpanded: toggleExpanded, triggerTransitions: data.triggerTransitions }));
        }))) : null));
};
exports.DevtoolsManager = DevtoolsManager;
//# sourceMappingURL=index.js.map