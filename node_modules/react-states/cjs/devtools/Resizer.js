"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Resizer = void 0;
const tslib_1 = require("tslib");
const React = tslib_1.__importStar(require("react"));
const __1 = require("../");
const styles_1 = require("./styles");
const states = __1.createStates({
    IDLE: () => ({}),
    DETECTING_RESIZE: (initialX) => ({ initialX }),
    RESIZING: (x) => ({ x }),
});
const actions = __1.createActions({
    onMouseMove: (x) => ({ x }),
    onMouseUp: (x) => ({ x }),
    onMouseUpResizer: () => ({}),
    onMouseDown: (x) => ({ x }),
});
const reducer = (state, action) => __1.transition(state, action, {
    IDLE: {
        onMouseDown: (_, { x }) => states.DETECTING_RESIZE(x),
    },
    DETECTING_RESIZE: {
        onMouseMove: (state, { x }) => {
            if (Math.abs(x - state.initialX) > 3) {
                return states.RESIZING(x);
            }
            return state;
        },
        onMouseUp: () => states.IDLE(),
        onMouseUpResizer: () => states.IDLE(),
    },
    RESIZING: {
        onMouseMove: (_, { x }) => states.RESIZING(x),
        onMouseUp: () => states.IDLE(),
    },
});
const Resizer = ({ onResize, onClick, isOpen, }) => {
    const [resizer, dispatch] = React.useReducer(reducer, {
        state: 'IDLE',
    });
    const { onMouseDown, onMouseMove, onMouseUp, onMouseUpResizer } = actions(dispatch);
    __1.useEnter(resizer, ['DETECTING_RESIZE', 'RESIZING'], () => {
        const onMouseMoveListener = (event) => onMouseMove(event.clientX);
        const onMouseUpListener = (event) => onMouseUp(event.clientX);
        window.addEventListener('mousemove', onMouseMoveListener);
        window.addEventListener('mouseup', onMouseUpListener);
        return () => {
            window.removeEventListener('mousemove', onMouseMoveListener);
            window.removeEventListener('mouseup', onMouseUpListener);
        };
    });
    __1.useTransition(resizer, ['DETECTING_RESIZE => onMouseMove => DETECTING_RESIZE', 'RESIZING => onMouseMove => RESIZING'], (_, { x }) => {
        onResize(window.innerWidth - x);
    });
    __1.useTransition(resizer, 'DETECTING_RESIZE => onMouseUpResizer => IDLE', () => onClick());
    const style = {
        position: 'absolute',
        height: '100%',
        width: '10px',
        backgroundColor: styles_1.colors.blue,
        userSelect: 'none',
        zIndex: 99999999,
    };
    return __1.match(resizer, {
        IDLE: () => React.createElement("div", { style: style, onMouseDown: (event) => onMouseDown(event.clientX) }),
        DETECTING_RESIZE: () => React.createElement("div", { style: style, onMouseUp: () => onMouseUpResizer() }),
        RESIZING: () => React.createElement("div", { style: style }),
    });
};
exports.Resizer = Resizer;
//# sourceMappingURL=Resizer.js.map